generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  password              String
  role                  Role      @default(USER)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  emailVerified         Boolean   @default(false)
  verificationCode      String?
  verificationCodeExpiry DateTime?
  verificationAttempts  Int       @default(0)
  lastVerificationSent  DateTime?
  orders                Order[]
  reviews               Review[]
  wishlist              Wishlist?
  cart                  Cart?
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id            String      @id @default(cuid())
  name          String
  slug          String      @unique
  description   String
  price         Decimal     @db.Decimal(10, 2)
  stock         Int
  images        String[]    @default([])
  thumbnails    String[]    @default([])
  categoryId    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  discountPrice Decimal?    @db.Decimal(10, 2)
  featured      Boolean     @default(false)
  orderItems    OrderItem[]
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  reviews       Review[]
  sale          Float?
  saleEndDate   DateTime?
  salePrice     Float?
  details       ProductDetail[]
  variants      ProductVariant[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]
  anonymousCartItems AnonymousCartItem[]
  anonymousWishlistItems AnonymousWishlistItem[]

  @@index([categoryId])
}

model Order {
  id              String         @id @default(cuid())
  userId          String
  status          OrderStatus    @default(PENDING)
  total           Decimal
  shippingName    String
  shippingPhone   String
  shippingAddress String
  shippingCity    String
  shippingNotes   String?
  paymentProof    String?
  couponId        String?
  coupon          Coupon?        @relation(fields: [couponId], references: [id])
  discountAmount  Decimal?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id])
  items           OrderItem[]
  statusHistory   StatusUpdate[]

  @@index([couponId])
}

model OrderItem {
  id        String       @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  color     String?
  status    OrderItemStatus? @default(ACTIVE)
  order     Order        @relation(fields: [orderId], references: [id])
  product   Product      @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String?
  userId    String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   @default("site") // "site" or "product"
}

// Updated Wishlist model without direct product relation - now using through table
model Wishlist {
  id        String    @id @default(cuid())
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
}

// Through table for wishlist items
model WishlistItem {
  id          String   @id @default(cuid())
  wishlistId  String
  productId   String
  createdAt   DateTime @default(now())
  wishlist    Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@index([productId])
}

// Anonymous Wishlist for non-authenticated users
model AnonymousWishlist {
  id        String    @id @default(cuid())
  sessionId String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  items     AnonymousWishlistItem[]
}

// Through table for anonymous wishlist items
model AnonymousWishlistItem {
  id          String           @id @default(cuid())
  wishlistId  String
  productId   String
  createdAt   DateTime         @default(now())
  wishlist    AnonymousWishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product     Product          @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@index([productId])
}

// Cart model for authenticated users
model Cart {
  id        String    @id @default(cuid())
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  couponId  String?
  coupon    Coupon?   @relation(fields: [couponId], references: [id])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@index([couponId])
}

// Cart item model
model CartItem {
  id            String   @id @default(cuid())
  cartId        String
  productId     String
  quantity      Int      @default(1)
  selectedColor String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  cart          Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([productId])
}

// Anonymous Cart for non-authenticated users
model AnonymousCart {
  id        String    @id @default(cuid())
  sessionId String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  couponId  String?
  coupon    Coupon?   @relation(fields: [couponId], references: [id])
  items     AnonymousCartItem[]

  @@index([couponId])
}

// Anonymous Cart Item
model AnonymousCartItem {
  id            String        @id @default(cuid())
  cartId        String
  productId     String
  quantity      Int           @default(1)
  selectedColor String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  cart          AnonymousCart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([productId])
}

model StatusUpdate {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  comment   String?
  createdAt DateTime    @default(now())
  order     Order       @relation(fields: [orderId], references: [id])
}

model ProductDetail {
  id          String   @id @default(cuid())
  label       String
  description String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
}

model ProductVariant {
  id        String   @id @default(cuid())
  color     String
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OrderItemStatus {
  ACTIVE
  CANCELLED
}

enum CouponType {
  PERCENTAGE
  FIXED
}

model Coupon {
  id          String       @id @default(cuid())
  name        String
  code        String       @unique
  type        CouponType
  value       Float
  endDate     DateTime?
  userLimit   Int?
  isEnabled   Boolean      @default(true)
  usedCount   Int          @default(0)
  usedBy      String[]     @default([])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orders      Order[]
  carts       Cart[]
  anonymousCarts AnonymousCart[]
}

model SiteSettings {
  id                String   @id @default("site-settings")
  maintenanceMode   Boolean  @default(false)
  maintenanceMessage String  @default("Site is under maintenance. Please try again later.")
  updatedAt         DateTime @updatedAt @default(now())
}
