generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_onIRfy5zv1tW@ep-tiny-fog-a9tsl8bc-pooler.gwc.azure.neon.tech/neondb?sslmode=require"
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  reviews   Review[]
  wishlist  Wishlist?
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id            String      @id @default(cuid())
  name          String
  slug          String      @unique
  description   String
  price         Decimal
  stock         Int
  categoryId    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  discountPrice Decimal?
  featured      Boolean     @default(false)
  orderItems    OrderItem[]
  category      Category    @relation(fields: [categoryId], references: [id])
  reviews       Review[]
  wishlists     Wishlist[]  @relation("ProductToWishlist")
  images        Image[]     @relation("ProductImages")
}

model Order {
  id              String         @id @default(cuid())
  userId          String
  status          OrderStatus    @default(PENDING)
  total           Decimal
  shippingName    String
  shippingPhone   String
  shippingAddress String
  shippingCity    String
  shippingNotes   String?
  paymentProof    String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id])
  items           OrderItem[]
  statusHistory   StatusUpdate[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String    @id @default(cuid())
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  Product[] @relation("ProductToWishlist")
}

model StatusUpdate {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  comment   String?
  createdAt DateTime    @default(now())
  order     Order       @relation(fields: [orderId], references: [id])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], name: "ProductImages")
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
